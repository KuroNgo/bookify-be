// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "hoaiphong01012002@gmail.com"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/event-types/create": {
            "post": {
                "description": "Creates a new event type for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event Types"
                ],
                "summary": "Create a new event type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current User Token",
                        "name": "currentUser",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Event Type Body",
                        "name": "eventType",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.EventType"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/event-types/delete": {
            "delete": {
                "description": "Deletes an event type by ID for the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event Types"
                ],
                "summary": "Delete an event type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current User Token",
                        "name": "currentUser",
                        "in": "header",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Event Type ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/event-types/get/all": {
            "get": {
                "description": "Retrieves a list of all event types",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event Types"
                ],
                "summary": "Get all event types",
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/event-types/get/id": {
            "get": {
                "description": "Retrieves the details of an event type by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event Types"
                ],
                "summary": "Get event type by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event Type ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/event-types/update": {
            "put": {
                "description": "Updates an existing event type",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Event Types"
                ],
                "summary": "Update an event type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Current User Token",
                        "name": "currentUser",
                        "in": "header",
                        "required": true
                    },
                    {
                        "description": "Event Type Body",
                        "name": "eventType",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.EventType"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/api/v1/events/create": {
            "post": {
                "description": "Add a new event to the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Create a new event",
                "parameters": [
                    {
                        "description": "Event input data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.EventInput"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/events/delete-one": {
            "delete": {
                "description": "Delete an event by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Delete an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/events/get-all/pagination": {
            "get": {
                "description": "Get a paginated list of all events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get all events with pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Page number, default is 1",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/events/get/all": {
            "get": {
                "description": "Get a list of all events",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get all events",
                "responses": {}
            }
        },
        "/api/v1/events/get/id": {
            "get": {
                "description": "Get details of an event by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get event by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/events/get/start-time": {
            "get": {
                "description": "Get events starting from a specific date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get events by start time",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date in YYYY-MM-DD format",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/events/get/start-time/pagination": {
            "get": {
                "description": "Get paginated events starting from a specific date",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Get events by start time with pagination",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Start date in YYYY-MM-DD format",
                        "name": "startDate",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Page number, default is 1",
                        "name": "page",
                        "in": "query"
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/events/update": {
            "put": {
                "description": "Update details of an existing event",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Events"
                ],
                "summary": "Update an event",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Event ID",
                        "name": "id",
                        "in": "query",
                        "required": true
                    },
                    {
                        "description": "Event input data",
                        "name": "event",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.EventInput"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/users/delete": {
            "delete": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Deletes the user's information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Delete User Information",
                "responses": {}
            }
        },
        "/api/v1/users/forget": {
            "post": {
                "description": "Sends an email with a verification code for password reset",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "User forget password",
                "parameters": [
                    {
                        "description": "Forget password input",
                        "name": "forgetInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.ForgetPassword"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/users/get/info": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Retrieves the user's information using the access token stored in cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Get User Information",
                "responses": {}
            }
        },
        "/api/v1/users/get/refresh": {
            "get": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Refresh the user's access token using a valid refresh token stored in cookies.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Refresh Access Token",
                "responses": {}
            }
        },
        "/api/v1/users/google/callback": {
            "get": {
                "description": "Login the user's google, but the function not use with swagger.",
                "tags": [
                    "User"
                ],
                "summary": "Login Google",
                "responses": {}
            }
        },
        "/api/v1/users/login": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Login user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Login user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "LoginUser",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.SignIn"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/users/logout": {
            "get": {
                "description": "Logout the current user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Logout user",
                "responses": {}
            }
        },
        "/api/v1/users/password/forget": {
            "patch": {
                "description": "Allows the user to change their password after verifying the code",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Change password",
                "parameters": [
                    {
                        "description": "Change password input",
                        "name": "changePasswordInput",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.ChangePasswordInput"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/users/signup": {
            "post": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Register a new user with form data",
                "consumes": [
                    "application/x-www-form-urlencoded",
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "type": "string",
                        "example": "\"john.doe@example.com\"",
                        "description": "Email of the user",
                        "name": "email",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"securepassword123\"",
                        "description": "Password of the user",
                        "name": "password",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"John Doe\"",
                        "description": "Full name of the user",
                        "name": "fullName",
                        "in": "formData",
                        "required": true
                    },
                    {
                        "type": "string",
                        "example": "\"http://example.com/avatar.jpg\"",
                        "description": "Avatar URL of the user",
                        "name": "avatarUrl",
                        "in": "formData"
                    },
                    {
                        "type": "string",
                        "example": "\"+1234567890\"",
                        "description": "Phone number of the user",
                        "name": "phone",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/users/update": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates the user's first name, last name, and username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User Information",
                "responses": {}
            }
        },
        "/api/v1/users/update/image": {
            "put": {
                "security": [
                    {
                        "CookieAuth": []
                    }
                ],
                "description": "Updates the user's first name, last name, and username",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Update User Information",
                "parameters": [
                    {
                        "type": "file",
                        "description": "Image file to upload",
                        "name": "file",
                        "in": "formData"
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/users/verify": {
            "patch": {
                "security": [
                    {
                        "ApiKeyAuth": []
                    }
                ],
                "description": "Register a new user with form data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Register user",
                "parameters": [
                    {
                        "description": "User data",
                        "name": "User",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.VerificationInput"
                        }
                    }
                ],
                "responses": {}
            }
        },
        "/api/v1/users/verify/password": {
            "patch": {
                "description": "Verifies the code sent to the user's email for changing password",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "User"
                ],
                "summary": "Verify code for password change",
                "parameters": [
                    {
                        "description": "Verification code input",
                        "name": "verificationCode",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/domain.VerificationInput"
                        }
                    }
                ],
                "responses": {}
            }
        }
    },
    "definitions": {
        "domain.ChangePasswordInput": {
            "type": "object",
            "required": [
                "password",
                "password_compare"
            ],
            "properties": {
                "password": {
                    "type": "string"
                },
                "password_compare": {
                    "type": "string"
                }
            }
        },
        "domain.EventInput": {
            "type": "object",
            "properties": {
                "actual_attendee": {
                    "type": "integer"
                },
                "asset_url": {
                    "type": "string"
                },
                "description": {
                    "type": "string"
                },
                "end_time": {
                    "type": "string"
                },
                "estimated_attendee": {
                    "type": "integer"
                },
                "event_type_id": {
                    "type": "string"
                },
                "image_url": {
                    "type": "string"
                },
                "mode": {
                    "description": "Public, Friend and Group, Invite Only",
                    "type": "string"
                },
                "organization_id": {
                    "type": "string"
                },
                "start_time": {
                    "type": "string"
                },
                "title": {
                    "type": "string"
                },
                "total_expenditure": {
                    "type": "number"
                },
                "venue_id": {
                    "type": "string"
                }
            }
        },
        "domain.EventType": {
            "type": "object",
            "properties": {
                "event_type_name": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                }
            }
        },
        "domain.ForgetPassword": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string"
                }
            }
        },
        "domain.SignIn": {
            "type": "object",
            "properties": {
                "email": {
                    "type": "string",
                    "example": "admin@admin.com"
                },
                "password": {
                    "type": "string",
                    "example": "12345"
                }
            }
        },
        "domain.VerificationInput": {
            "type": "object",
            "required": [
                "verification_code"
            ],
            "properties": {
                "verification_code": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Bookify",
	Description:      "This is a server for Kuro API",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	//LeftDelim:        "{{",
	//RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
