basePath: /api/v1
definitions:
  domain.ChangePasswordInput:
    properties:
      password:
        type: string
      password_compare:
        type: string
    type: object
  domain.EmployeeInput:
    properties:
      email:
        type: string
      first_name:
        type: string
      job_title:
        type: string
      last_name:
        type: string
      organization_id:
        type: string
    type: object
  domain.EventDiscount:
    properties:
      applicable_users:
        description: User được chọn
        items:
          type: string
        type: array
      date_created:
        type: string
      discount_unit:
        type: string
      discount_value:
        type: integer
      end_date:
        type: string
      event_id:
        type: string
      id:
        type: string
      start_date:
        type: string
    type: object
  domain.EventDiscountInput:
    properties:
      applicable_users:
        description: User được chọn
        items:
          type: string
        type: array
      date_created:
        type: string
      discount_unit:
        type: string
      discount_value:
        type: integer
      end_date:
        type: string
      event_id:
        type: string
      start_date:
        type: string
    type: object
  domain.EventEmployeeInput:
    properties:
      deadline:
        type: string
      employeeID:
        type: string
      event_id:
        type: string
      start_date:
        type: string
      task:
        type: string
      task_completed:
        type: boolean
    type: object
  domain.EventInput:
    properties:
      actual_attendee:
        type: integer
      address_line:
        type: string
      asset_url:
        type: string
      capacity:
        type: integer
      city:
        type: string
      country:
        type: string
      description:
        type: string
      end_time:
        type: string
      estimated_attendee:
        type: integer
      event_mode:
        type: string
      event_type_name:
        type: string
      from_attend:
        type: string
      image_url:
        type: string
      link_attend:
        type: string
      mode:
        description: Public, Friend and Group, Invite Only
        type: string
      organization_id:
        type: string
      short_description:
        type: string
      start_time:
        type: string
      tags:
        items:
          type: string
        type: array
      title:
        type: string
      total_expenditure:
        type: number
    type: object
  domain.EventPartnerInput:
    properties:
      event_id:
        type: string
      partner_id:
        type: string
      role:
        type: string
    type: object
  domain.EventTicket:
    properties:
      event_id:
        type: string
      id:
        type: string
      price:
        type: number
      quantity:
        type: number
      status:
        description: Trạng thái vé - automatic (available, sold_out, expired, canceled,
          pending, reserved)
        type: string
    type: object
  domain.EventTicketAssignmentInput:
    properties:
      attendance_id:
        type: string
      event_id:
        type: string
      expiry_date:
        type: string
      id:
        type: string
      price:
        type: integer
      purchase_date:
        type: string
      status:
        description: use, useless
        type: string
      ticket_type:
        type: string
    type: object
  domain.EventTypeInput:
    properties:
      name:
        type: string
    type: object
  domain.EventWishlist:
    properties:
      created_at:
        type: string
      event_id:
        type: string
      id:
        type: string
      notes:
        type: string
      user_id:
        type: string
    type: object
  domain.EventWishlistInput:
    properties:
      event_id:
        type: string
      notes:
        type: string
      user_id:
        type: string
    type: object
  domain.ForgetPassword:
    properties:
      email:
        type: string
    type: object
  domain.OrganizationInput:
    properties:
      contact_person:
        type: string
      email:
        type: string
      name:
        type: string
      phone:
        type: string
      user_id:
        type: string
    type: object
  domain.PartnerInput:
    properties:
      email:
        type: string
      name:
        type: string
      phone:
        type: string
    type: object
  domain.SignIn:
    properties:
      email:
        example: admin@admin.com
        type: string
      password:
        example: "12345"
        type: string
    type: object
  domain.SignupUser:
    properties:
      email:
        type: string
      password:
        description: Hash of the password
        type: string
      phone:
        type: string
    type: object
  domain.UpdateSocialMedia:
    properties:
      enable_automatic_sharing_of_events:
        type: boolean
      enable_sharing_on:
        items:
          type: string
        type: array
      facebook_sc:
        type: string
      id:
        type: string
      instagram_sc:
        type: string
      linked_in_sc:
        type: string
      youtube_sc:
        type: string
    type: object
  domain.UpdateUserSettings:
    properties:
      address:
        type: string
      city:
        type: string
      date_of_birth:
        type: string
      full_name:
        type: string
      gender:
        type: string
      id:
        type: string
      phone:
        type: string
      region:
        type: string
      show_interest:
        type: boolean
      social_media:
        type: boolean
      vocation:
        type: string
    type: object
  domain.VenueInput:
    properties:
      address_line:
        type: string
      capacity:
        type: integer
      city:
        type: string
      country:
        type: string
      event_mode:
        type: string
      from_attend:
        type: string
      link_attend:
        type: string
    type: object
  domain.VerificationInput:
    properties:
      verification_code:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: hoaiphong01012002@gmail.com
    name: API Support
  description: This is a server for Kuro API
  title: Bookify
  version: "1.0"
paths:
  /api/v1/employees/create:
    post:
      consumes:
      - application/json
      description: Create a new employee record for a specific organization
      parameters:
      - description: Employee details
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/domain.EmployeeInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new employee
      tags:
      - Employees
  /api/v1/employees/delete:
    delete:
      consumes:
      - application/json
      description: Delete an employee record by ID
      parameters:
      - description: Employee ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an employee
      tags:
      - Employees
  /api/v1/employees/get/all:
    get:
      consumes:
      - application/json
      description: Retrieve all employee records
      produces:
      - application/json
      responses: {}
      summary: Get all employees
      tags:
      - Employees
  /api/v1/employees/get/id:
    get:
      consumes:
      - application/json
      description: Retrieve an employee record by its ID
      parameters:
      - description: Employee ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get an employee by ID
      tags:
      - Employees
  /api/v1/employees/update:
    put:
      consumes:
      - application/json
      description: Update an employee record by ID
      parameters:
      - description: Employee ID
        in: query
        name: id
        required: true
        type: string
      - description: Updated employee details
        in: body
        name: employee
        required: true
        schema:
          $ref: '#/definitions/domain.EmployeeInput'
      produces:
      - application/json
      responses: {}
      summary: Update an employee
      tags:
      - Employees
  /api/v1/event-discount/create:
    post:
      consumes:
      - application/json
      description: Creates a new event discount for the current user
      parameters:
      - description: Event discount Body
        in: body
        name: discount
        required: true
        schema:
          $ref: '#/definitions/domain.EventDiscountInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new event discount
      tags:
      - Event Discounts
  /api/v1/event-discount/delete:
    delete:
      consumes:
      - application/json
      description: Deletes an event discount by ID for the current user
      parameters:
      - description: Event Discount ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an event discount
      tags:
      - Event Discounts
  /api/v1/event-discount/get/id:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an event discount by its ID
      parameters:
      - description: Event Discount ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get event discount by ID
      tags:
      - Event Discounts
  /api/v1/event-discount/update:
    put:
      consumes:
      - application/json
      description: Updates an existing event discount
      parameters:
      - description: Event Discount Body
        in: body
        name: eventDiscount
        required: true
        schema:
          $ref: '#/definitions/domain.EventDiscount'
      produces:
      - application/json
      responses: {}
      summary: Update an event discount
      tags:
      - Event Discounts
  /api/v1/event-discounts/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all event discounts
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get all event discount
      tags:
      - Event Discounts
  /api/v1/event-employee/create:
    post:
      consumes:
      - application/json
      description: Creates a new event employee for the current user
      parameters:
      - description: Event Employee Body
        in: body
        name: eventEmployee
        required: true
        schema:
          $ref: '#/definitions/domain.EventEmployeeInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new event employee
      tags:
      - Event Employees
  /api/v1/event-employees/delete:
    delete:
      consumes:
      - application/json
      description: Deletes an event employee by ID for the current user
      parameters:
      - description: Event Type ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an event employee
      tags:
      - Event Employees
  /api/v1/event-employees/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all event employee
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get all event employee
      tags:
      - Event Employees
  /api/v1/event-employees/get/id:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an event employee by its ID
      parameters:
      - description: Event Employee ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get event employee by ID
      tags:
      - Event Employees
  /api/v1/event-employees/update:
    put:
      consumes:
      - application/json
      description: Updates an existing event employee
      parameters:
      - description: Event Employee Body
        in: body
        name: eventEmployee
        required: true
        schema:
          $ref: '#/definitions/domain.EventEmployeeInput'
      produces:
      - application/json
      responses: {}
      summary: Update an event employee
      tags:
      - Event Employees
  /api/v1/event-partners/create:
    post:
      consumes:
      - application/json
      description: Creates a new event type for the current user
      parameters:
      - description: Event Partner Body
        in: body
        name: eventPartner
        required: true
        schema:
          $ref: '#/definitions/domain.EventPartnerInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new event partner
      tags:
      - Event Partners
  /api/v1/event-partners/delete:
    delete:
      consumes:
      - application/json
      description: Deletes an event partner by ID for the current user
      parameters:
      - description: Event Partner ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an event partner
      tags:
      - Event Partners
  /api/v1/event-partners/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all event partner
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get all event partner
      tags:
      - Event Partners
  /api/v1/event-partners/get/id:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an event partner by its ID
      parameters:
      - description: Event Partner ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get event partner by ID
      tags:
      - Event Partners
  /api/v1/event-partners/update:
    put:
      consumes:
      - application/json
      description: Updates an existing event partner
      parameters:
      - description: Event Partner Body
        in: body
        name: eventPartner
        required: true
        schema:
          $ref: '#/definitions/domain.EventPartnerInput'
      produces:
      - application/json
      responses: {}
      summary: Update an event partner
      tags:
      - Event Partners
  /api/v1/event-ticket-assignment/delete:
    delete:
      consumes:
      - application/json
      description: Deletes an event ticket assignment by ID for the current user
      parameters:
      - description: Event Ticket Assignment ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an event ticket assignment
      tags:
      - Event Ticket Assignments
  /api/v1/event-ticket-assignments/create:
    post:
      consumes:
      - application/json
      description: Creates a new event ticket assignment for the current user
      parameters:
      - description: Event Ticket Assignment Body
        in: body
        name: eventTicketAssignment
        required: true
        schema:
          $ref: '#/definitions/domain.EventTicketAssignmentInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new event ticket assignment
      tags:
      - Event Ticket Assignments
  /api/v1/event-ticket-assignments/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all event ticket assignment
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get all event ticket assignment
      tags:
      - Event Ticket Assignments
  /api/v1/event-ticket-assignments/get/id:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an event ticket assignment by its ID
      parameters:
      - description: Event Ticket Assignment ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get event ticket assignment by ID
      tags:
      - Event Ticket Assignments
  /api/v1/event-ticket-assignments/update:
    put:
      consumes:
      - application/json
      description: Updates an existing event ticket assignment
      parameters:
      - description: Event Ticket Assignment Body
        in: body
        name: eventTicketAssignment
        required: true
        schema:
          $ref: '#/definitions/domain.EventTicketAssignmentInput'
      produces:
      - application/json
      responses: {}
      summary: Update an event ticket assignment
      tags:
      - Event Ticket Assignments
  /api/v1/event-tickets/create:
    post:
      consumes:
      - application/json
      description: Creates a new event ticket for the current user
      parameters:
      - description: Event Ticket Body
        in: body
        name: eventTickets
        required: true
        schema:
          $ref: '#/definitions/domain.EventTicket'
      produces:
      - application/json
      responses: {}
      summary: Create a new event ticket
      tags:
      - Event Tickets
  /api/v1/event-tickets/delete:
    delete:
      consumes:
      - application/json
      description: Deletes an event ticket by ID for the current user
      parameters:
      - description: Event Tickets ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an event ticket
      tags:
      - Event Tickets
  /api/v1/event-tickets/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all event tickets
      produces:
      - application/json
      responses: {}
      summary: Get all event tickets
      tags:
      - Event Tickets
  /api/v1/event-tickets/get/id:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an event tickets by its ID
      parameters:
      - description: Event Ticket ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get event tickets by ID
      tags:
      - Event Tickets
  /api/v1/event-tickets/update:
    put:
      consumes:
      - application/json
      description: Updates an existing event ticket
      parameters:
      - description: Event Ticket Body
        in: body
        name: eventTicket
        required: true
        schema:
          $ref: '#/definitions/domain.EventTicket'
      produces:
      - application/json
      responses: {}
      summary: Update an event ticket
      tags:
      - Event Tickets
  /api/v1/event-types/create:
    post:
      consumes:
      - application/json
      description: Creates a new event type for the current user
      parameters:
      - description: Event Type Body
        in: body
        name: eventType
        required: true
        schema:
          $ref: '#/definitions/domain.EventTypeInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new event type
      tags:
      - Event Types
  /api/v1/event-types/delete:
    delete:
      consumes:
      - application/json
      description: Deletes an event type by ID for the current user
      parameters:
      - description: Event Type ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an event type
      tags:
      - Event Types
  /api/v1/event-types/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all event types
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get all event types
      tags:
      - Event Types
  /api/v1/event-types/get/id:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an event type by its ID
      parameters:
      - description: Event Type ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get event type by ID
      tags:
      - Event Types
  /api/v1/event-types/get/name:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an event type by its Name
      parameters:
      - description: Event Type Name
        in: query
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get event type by Name
      tags:
      - Event Types
  /api/v1/event-types/update:
    put:
      consumes:
      - application/json
      description: Updates an existing event type
      parameters:
      - description: Event Type Body
        in: body
        name: eventType
        required: true
        schema:
          $ref: '#/definitions/domain.EventTypeInput'
      produces:
      - application/json
      responses: {}
      summary: Update an event type
      tags:
      - Event Types
  /api/v1/event-wishlist/update:
    put:
      consumes:
      - application/json
      description: Updates an existing event wishlists
      parameters:
      - description: Event Wishlist Body
        in: body
        name: eventWishlist
        required: true
        schema:
          $ref: '#/definitions/domain.EventWishlistInput'
      produces:
      - application/json
      responses: {}
      summary: Update an event wishlists
      tags:
      - Event Wishlists
  /api/v1/event-wishlists/create:
    post:
      consumes:
      - application/json
      description: Creates a new event wishlist for the current user
      parameters:
      - description: Event Wishlist Body
        in: body
        name: eventWishlist
        required: true
        schema:
          $ref: '#/definitions/domain.EventWishlist'
      produces:
      - application/json
      responses: {}
      summary: Create a new event wishlist
      tags:
      - Event Wishlists
  /api/v1/event-wishlists/delete:
    delete:
      consumes:
      - application/json
      description: Deletes an event wishlist by ID for the current user
      parameters:
      - description: Event Wishlist ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an event wishlist
      tags:
      - Event Wishlists
  /api/v1/event-wishlists/get/all:
    get:
      consumes:
      - application/json
      description: Retrieves a list of all event wishlists
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get all event wishlist
      tags:
      - Event Wishlists
  /api/v1/event-wishlists/get/id:
    get:
      consumes:
      - application/json
      description: Retrieves the details of an event wishlist by its ID
      parameters:
      - description: Event Wishlists ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Get event wishlist by ID
      tags:
      - Event Wishlists
  /api/v1/event/create:
    post:
      consumes:
      - application/json
      description: Add a new event to the system
      parameters:
      - description: Event input data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/domain.EventInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new event
      tags:
      - Events
  /api/v1/event/create/async:
    post:
      consumes:
      - application/json
      description: Add a new event to the system
      parameters:
      - description: Event input data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/domain.EventInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new event
      tags:
      - Events
  /api/v1/event/delete-one:
    delete:
      consumes:
      - application/json
      description: Delete an event by its ID
      parameters:
      - description: Event ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete an event
      tags:
      - Events
  /api/v1/event/get-all/pagination:
    get:
      consumes:
      - application/json
      description: Get a paginated list of all event
      parameters:
      - description: Page number, default is 1
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get all event with pagination
      tags:
      - Events
  /api/v1/event/get/all:
    get:
      consumes:
      - application/json
      description: Get a list of all event
      produces:
      - application/json
      responses: {}
      summary: Get all event
      tags:
      - Events
  /api/v1/event/get/id:
    get:
      consumes:
      - application/json
      description: Get details of an event by its ID
      parameters:
      - description: Event ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get event by ID
      tags:
      - Events
  /api/v1/event/get/start-time:
    get:
      consumes:
      - application/json
      description: Get event starting from a specific date
      parameters:
      - description: Start date in YYYY-MM-DD format
        in: query
        name: startDate
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get event by start time
      tags:
      - Events
  /api/v1/event/get/start-time/pagination:
    get:
      consumes:
      - application/json
      description: Get paginated event starting from a specific date
      parameters:
      - description: Start date in YYYY-MM-DD format
        in: query
        name: startDate
        required: true
        type: string
      - description: Page number, default is 1
        in: query
        name: page
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get event by start time with pagination
      tags:
      - Events
  /api/v1/event/get/title:
    get:
      consumes:
      - application/json
      description: Get details of an event by title
      produces:
      - application/json
      responses: {}
      summary: Get event by title
      tags:
      - Events
  /api/v1/event/get/user_id:
    get:
      consumes:
      - application/json
      description: Get details of an event by its User ID
      produces:
      - application/json
      responses: {}
      summary: Get event by UserID
      tags:
      - Events
  /api/v1/event/get/user_id/start_time:
    get:
      consumes:
      - application/json
      description: Retrieve event details for a specific user based on User ID and
        Start Time
      parameters:
      - description: Start Time (ISO 8601 format)
        in: query
        name: start_time
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - BearerAuth: []
      summary: Get events by User ID and Start Time
      tags:
      - Events
  /api/v1/event/update:
    put:
      consumes:
      - application/json
      description: Update details of an existing event
      parameters:
      - description: Event ID
        in: query
        name: id
        required: true
        type: string
      - description: Event input data
        in: body
        name: event
        required: true
        schema:
          $ref: '#/definitions/domain.EventInput'
      produces:
      - application/json
      responses: {}
      summary: Update an event
      tags:
      - Events
  /api/v1/event/update/image:
    patch:
      consumes:
      - application/json
      description: Update details of an existing event
      parameters:
      - description: Event ID
        in: query
        name: id
        required: true
        type: string
      - description: Image file to upload
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses: {}
      summary: Update an event
      tags:
      - Events
  /api/v1/organizations/create:
    post:
      consumes:
      - application/json
      description: Creates a new organization for the current user
      parameters:
      - description: Organization Input Body
        in: body
        name: eventType
        required: true
        schema:
          $ref: '#/definitions/domain.OrganizationInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new organization
      tags:
      - Organizations
  /api/v1/organizations/delete:
    delete:
      description: Deletes a specific organization by ID. User must be logged in.
      parameters:
      - description: Organization ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Delete an organization
      tags:
      - Organizations
  /api/v1/organizations/get/all:
    get:
      description: Retrieve a list of all organizations.
      produces:
      - application/json
      responses: {}
      summary: Get all organizations
      tags:
      - Organizations
  /api/v1/organizations/get/id:
    get:
      description: Retrieve details of an organization using its ID.
      parameters:
      - description: Organization ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get organization by ID
      tags:
      - Organizations
  /api/v1/organizations/get/user_id:
    get:
      description: Retrieve details of an organization using its ID.
      produces:
      - application/json
      responses: {}
      summary: Get organization by ID
      tags:
      - Organizations
  /api/v1/organizations/update:
    put:
      consumes:
      - application/json
      description: Update details of an organization by its ID.
      parameters:
      - description: Organization ID
        in: query
        name: id
        required: true
        type: string
      - description: Organization data
        in: body
        name: OrganizationInput
        required: true
        schema:
          $ref: '#/definitions/domain.OrganizationInput'
      produces:
      - application/json
      responses: {}
      summary: Update an organization
      tags:
      - Organizations
  /api/v1/partners/create:
    post:
      consumes:
      - application/json
      description: Create a new partner in the system
      parameters:
      - description: Partner Input Data
        in: body
        name: partnerInput
        required: true
        schema:
          $ref: '#/definitions/domain.PartnerInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new partner
      tags:
      - partners
  /api/v1/partners/delete:
    delete:
      consumes:
      - application/json
      description: Delete a partner from the system using the partner ID
      parameters:
      - description: Partner ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete a partner by ID
      tags:
      - partners
  /api/v1/partners/get/all:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all partners from the system
      produces:
      - application/json
      responses: {}
      summary: Get a list of all partners
      tags:
      - partners
  /api/v1/partners/get/id:
    get:
      consumes:
      - application/json
      description: Retrieve a partner from the system using the partner's ID
      parameters:
      - description: Partner ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get a partner by ID
      tags:
      - partners
  /api/v1/partners/update:
    put:
      consumes:
      - application/json
      description: Update the details of a partner using the partner's ID and input
        data
      parameters:
      - description: Partner ID
        in: query
        name: id
        required: true
        type: string
      - description: Partner data
        in: body
        name: partnerInput
        required: true
        schema:
          $ref: '#/definitions/domain.PartnerInput'
      produces:
      - application/json
      responses: {}
      summary: Update a partner by ID
      tags:
      - partners
  /api/v1/user/update/profile:
    patch:
      consumes:
      - multipart/form-data
      description: Update the profile information of the currently logged-in user
      parameters:
      - description: Full name of the user
        in: formData
        name: full_name
        type: string
      - description: Gender of the user
        in: formData
        name: gender
        type: string
      - description: Vocation or profession
        in: formData
        name: vocation
        type: string
      - description: Address of the user
        in: formData
        name: address
        type: string
      - description: City of residence
        in: formData
        name: city
        type: string
      - description: Region or state
        in: formData
        name: region
        type: string
      - description: Date of birth in YYYY-MM-DD format
        in: formData
        name: date_of_birth
        type: string
      - description: Show interests in profile (true/false)
        in: formData
        name: show_interest
        type: boolean
      - description: Enable social media sharing (true/false)
        in: formData
        name: social_media
        type: boolean
      - description: Profile picture file
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses: {}
      summary: Update user profile
      tags:
      - User
  /api/v1/users/delete:
    delete:
      consumes:
      - application/json
      description: Deletes the user's information
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Delete User Information
      tags:
      - User
  /api/v1/users/forget:
    post:
      consumes:
      - application/json
      description: Sends an email with a verification code for password reset
      parameters:
      - description: Forget password input
        in: body
        name: forgetInput
        required: true
        schema:
          $ref: '#/definitions/domain.ForgetPassword'
      produces:
      - application/json
      responses: {}
      summary: User forget password
      tags:
      - User
  /api/v1/users/get/info:
    get:
      consumes:
      - application/json
      description: Retrieves the user's information using the access token stored
        in cookies.
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Get User Information
      tags:
      - User
  /api/v1/users/get/refresh:
    get:
      consumes:
      - application/json
      description: Refresh the user's access token using a valid refresh token stored
        in cookies.
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Refresh Access Token
      tags:
      - User
  /api/v1/users/google/callback:
    get:
      description: Login the user's google, but the function not use with swagger.
      responses: {}
      summary: Login Google
      tags:
      - User
  /api/v1/users/login:
    post:
      consumes:
      - application/json
      description: Login user
      parameters:
      - description: User data
        in: body
        name: LoginUser
        required: true
        schema:
          $ref: '#/definitions/domain.SignIn'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Login user
      tags:
      - User
  /api/v1/users/logout:
    get:
      consumes:
      - application/json
      description: Logout the current user
      produces:
      - application/json
      responses: {}
      summary: Logout user
      tags:
      - User
  /api/v1/users/password/forget:
    patch:
      consumes:
      - application/json
      description: Allows the user to change their password after verifying the code
      parameters:
      - description: Change password input
        in: body
        name: changePasswordInput
        required: true
        schema:
          $ref: '#/definitions/domain.ChangePasswordInput'
      produces:
      - application/json
      responses: {}
      summary: Change password
      tags:
      - User
  /api/v1/users/signup:
    post:
      description: Register a new user with form data
      parameters:
      - description: User data
        in: body
        name: SignUp
        required: true
        schema:
          $ref: '#/definitions/domain.SignupUser'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Register user
      tags:
      - User
  /api/v1/users/update:
    put:
      consumes:
      - application/json
      description: Updates the user's first name, last name, and username
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Update User Information
      tags:
      - User
  /api/v1/users/update/image:
    put:
      consumes:
      - application/json
      description: Updates the user's first name, last name, and username
      parameters:
      - description: Image file to upload
        in: formData
        name: file
        type: file
      produces:
      - application/json
      responses: {}
      security:
      - CookieAuth: []
      summary: Update User Information
      tags:
      - User
  /api/v1/users/update/profile/non-image:
    patch:
      consumes:
      - application/json
      description: Update profile user
      parameters:
      - description: User data
        in: body
        name: UpdateUserProfileNotImage
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateUserSettings'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Update profile user
      tags:
      - User
  /api/v1/users/update/social:
    patch:
      consumes:
      - application/json
      description: Allows the logged-in user to update their social media links
      parameters:
      - description: Social media update payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/domain.UpdateSocialMedia'
      produces:
      - application/json
      responses: {}
      summary: Update social media links of the current user
      tags:
      - User
  /api/v1/users/verify:
    patch:
      consumes:
      - application/json
      description: Register a new user with form data
      parameters:
      - description: User data
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/domain.VerificationInput'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Register user
      tags:
      - User
  /api/v1/users/verify/password:
    patch:
      consumes:
      - application/json
      description: Verifies the code sent to the user's email for changing password
      parameters:
      - description: Verification code input
        in: body
        name: verificationCode
        required: true
        schema:
          $ref: '#/definitions/domain.VerificationInput'
      produces:
      - application/json
      responses: {}
      summary: Verify code for password change
      tags:
      - User
  /api/v1/venues/create:
    post:
      consumes:
      - application/json
      description: Create a new venue using the provided input data
      parameters:
      - description: Venue input data
        in: body
        name: venueInput
        required: true
        schema:
          $ref: '#/definitions/domain.VenueInput'
      produces:
      - application/json
      responses: {}
      summary: Create a new venue
      tags:
      - Venues
  /api/v1/venues/delete:
    delete:
      consumes:
      - application/json
      description: Delete a venue by its ID
      parameters:
      - description: Venue ID to delete
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Delete a venue
      tags:
      - Venues
  /api/v1/venues/get/all:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all venues
      produces:
      - application/json
      responses: {}
      summary: Get all venues
      tags:
      - Venues
  /api/v1/venues/get/id:
    get:
      consumes:
      - application/json
      description: Retrieve a venue by its ID
      parameters:
      - description: Venue ID
        in: query
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses: {}
      summary: Get venue by ID
      tags:
      - Venues
  /api/v1/venues/update:
    put:
      consumes:
      - application/json
      description: Update the details of a specific venue by providing venue data
        and the current user
      parameters:
      - description: Venue data to update
        in: body
        name: venueInput
        required: true
        schema:
          $ref: '#/definitions/domain.VenueInput'
      produces:
      - application/json
      responses: {}
      security:
      - ApiKeyAuth: []
      summary: Update venue details
      tags:
      - Venues
swagger: "2.0"
